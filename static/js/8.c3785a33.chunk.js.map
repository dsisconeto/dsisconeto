{"version":3,"sources":["components/AppPage.tsx","domain/empresa/EmpresaService.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","common/IPage.ts","pages/Empresa/Listagem/EmpresaListagemView.tsx","pages/Empresa/Listagem/EmpresaListagem.tsx"],"names":["AppPage","header","children","alertModel","className","xs","sm","buscaEmpresasPaginadas","pageable","query","qs","stringify","vouDeVanApi","get","EMPRESAS","removeMascaraCNPJ","cnpj","replaceAll","removeMascaraTelefone","cadastraEmpresa","empresa","telefone","post","editaEmpresa","empresaId","uri","put","deletaEmpresa","delete","buscaEmpresaPorId","buscaEmpresaParaAutocomplete","termo","a","response","data","map","value","id","label","nome","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","createPage","content","number","size","totalElements","totalPages","createPageRequest","page","EmpresaListagemView","isLoading","setIsLoading","pageRequest","onChangeRowsPerPage","alert","onChangePage","props","forEach","empresaDto","action","TableActions","onDelete","toString","Header","noHeader","columns","name","selector","sortable","width","progressPending","pagination","paginationRowsPerPageOptions","paginationPerPage","striped","paginationServer","paginationTotalRows","history","useHistory","color","onClick","push","window","confirm","NovaEmpresaButton","EmpresaListagem","useState","setPage","setPageRequest","setAlert","useEffect","catch","e","alertFromAxiosError","_"],"mappings":"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","file":"static/js/8.c3785a33.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport {Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport AlertModel from \"../common/AlertModel\";\nimport AppAlert from \"./AppAlert\";\n\n\ninterface Props {\n  header: JSX.Element,\n  alertModel?: AlertModel\n}\n\n\nconst AppPage: FC<Props> = ({header, children, alertModel}) => {\n  return (<div className=\"animated fadeIn\">\n    <Row>\n      <Col xs=\"12\" sm=\"12\">\n        <Card>\n          <CardHeader>\n            {header}\n          </CardHeader>\n          <CardBody>\n            <AppAlert alertModel={alertModel}/>\n            {children}\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  </div>);\n}\n\n\nexport default AppPage;\n\n","import vouDeVanApi from '../../common/vouDeVanApi';\n\nimport qs from 'qs';\nimport EmpresaFormModel from './EmpresaFormModel';\nimport IPage, {IPageRequest} from '../../common/IPage';\nimport EmpresaListagemModel from './EmpresaListagemModel';\nimport EmpresaAutocompleteModel from \"./EmpresaAutocompleteModel\";\n\n\nconst EMPRESAS = '/empresas';\n\n\nexport function buscaEmpresasPaginadas(pageable: IPageRequest) {\n  const query = qs.stringify(pageable);\n  return vouDeVanApi.get<IPage<EmpresaListagemModel>>(EMPRESAS + '?' + query);\n}\n\nfunction removeMascaraCNPJ(cnpj: string) {\n  return cnpj.replaceAll('-', '')\n    .replaceAll('/', '')\n    .replaceAll('.', '');\n}\n\nfunction removeMascaraTelefone(cnpj: string) {\n  return cnpj.replaceAll('-', '')\n    .replaceAll(' ', '')\n    .replaceAll(')', '')\n    .replaceAll('(', '');\n}\n\nexport function cadastraEmpresa(empresa: EmpresaFormModel) {\n\n  empresa.cnpj = removeMascaraCNPJ(empresa.cnpj);\n  empresa.telefone = removeMascaraTelefone(empresa.telefone)\n\n  return vouDeVanApi.post<EmpresaFormModel>(EMPRESAS, empresa);\n}\n\nexport function editaEmpresa(empresaId: number | string, empresa: EmpresaFormModel) {\n  empresa.cnpj = removeMascaraCNPJ(empresa.cnpj);\n  empresa.telefone = removeMascaraTelefone(empresa.telefone)\n  const uri = EMPRESAS + '/' + empresaId;\n  return vouDeVanApi.put<null>(uri, empresa);\n}\n\nexport function deletaEmpresa(empresaId: number | string) {\n  const uri = EMPRESAS + '/' + empresaId;\n  return vouDeVanApi.delete<null>(uri);\n}\n\nexport function buscaEmpresaPorId(empresaId: number | string) {\n  const uri = EMPRESAS + '/' + empresaId;\n  return vouDeVanApi.get<EmpresaFormModel>(uri);\n}\n\nexport async function buscaEmpresaParaAutocomplete(termo: string) {\n  const response = await vouDeVanApi.get<EmpresaAutocompleteModel[]>(EMPRESAS + \"/busca-para-autocomplete?termo=\" + termo);\n  return response.data.map(empresa => {\n    return {value: empresa.id, label: `${empresa.id} - ${empresa.nome}`}\n  });\n}\n\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default interface IPage<T> {\n  content: Array<T>,\n  size: number,\n  number: number,\n  totalPages: number,\n  totalElements: number,\n}\n\nexport interface IPageRequest {\n  page: number,\n  size: number\n}\n\nexport function createPage<T>(): IPage<T> {\n  return {content: [], number: 0, size: 0, totalElements: 0, totalPages: 0}\n}\n\n\nexport function createPageRequest(): IPageRequest {\n  return {page: 0, size: 0};\n}\n\n","import AppPage from \"../../../components/AppPage\";\nimport React from \"react\";\nimport {RouteComponentProps} from \"react-router\";\nimport Button from \"reactstrap/lib/Button\";\nimport EmpresaListagemModel from \"../../../domain/empresa/EmpresaListagemModel\";\n\nimport IPage, {IPageRequest} from \"../../../common/IPage\";\nimport DataTable from \"react-data-table-component\";\nimport AlertModel from \"../../../common/AlertModel\";\nimport {useHistory} from \"react-router-dom\";\nimport {deletaEmpresa} from \"../../../domain/empresa/EmpresaService\";\n\n\ninterface Props extends RouteComponentProps {\n  alert?: AlertModel\n  isLoading: boolean,\n  setIsLoading: (isLoanding: boolean) => void\n  page: IPage<EmpresaListagemModel>,\n  pageRequest: IPageRequest,\n  onChangePage: (page: number, totalRows: number) => void;\n  onChangeRowsPerPage: (\n    currentRowsPerPage: number,\n    currentPage: number\n  ) => void\n}\n\nexport function EmpresaListagemView({isLoading, setIsLoading, page, pageRequest, onChangeRowsPerPage, alert, onChangePage, ...props}: Props) {\n\n\n  page.content.forEach(empresaDto => {\n    empresaDto.action = (<TableActions onDelete={() => setIsLoading(true)} empresaId={empresaDto.id.toString()}/>);\n  })\n\n  const header = <Header  {...props}/>;\n\n  return (<AppPage header={header} alertModel={alert}>\n    <DataTable\n      noHeader\n      columns={colunasDaTabela()}\n      data={page.content}\n      progressPending={isLoading}\n      pagination\n      paginationRowsPerPageOptions={[5, 50, 500]}\n      paginationPerPage={pageRequest.size}\n      striped\n      paginationServer\n      paginationTotalRows={page.totalElements}\n      onChangeRowsPerPage={onChangeRowsPerPage}\n      onChangePage={onChangePage}\n    />\n  </AppPage>);\n\n}\n\n\nfunction colunasDaTabela() {\n  return [\n    {\n      name: '#',\n      selector: 'id',\n      sortable: false,\n      width: '80px',\n    },\n    {\n      name: 'Empresa',\n      selector: 'nome',\n      sortable: false,\n    },\n    {\n      name: 'Representante',\n      selector: 'representante',\n      sortable: false,\n    },\n    {\n      name: 'Telefone',\n      selector: 'telefone',\n      sortable: false,\n    },\n\n    {\n      name: 'Email',\n      selector: 'email',\n      sortable: false,\n    },\n    {\n      name: 'Ações',\n      selector: 'action',\n      sortable: false,\n    },\n\n  ];\n\n}\n\nfunction TableActions({empresaId, onDelete}: {\n  empresaId: string,\n  onDelete: () => void\n}) {\n  const history = useHistory();\n\n  const onEdit = () => history.push(`/empresas/editar/${empresaId}`);\n\n  const onClickDelete = () => {\n    if (!window.confirm('Confirme que você quer deletar a empresa')) return;\n    deletaEmpresa(empresaId).then(() => onDelete());\n  };\n\n  return (\n    <>\n      <Button color={'primary'} className={'mr-2'} onClick={onEdit}><i className=\"fas fa-pencil-alt\"/></Button>\n      <Button color={'danger'} onClick={onClickDelete}><i className=\"fas fa-trash\"/></Button>\n    </>\n  );\n}\n\n\nfunction NovaEmpresaButton({history}: RouteComponentProps) {\n  const onClick = () => history.push('/empresas/cadastrar');\n  return <Button color={'success'} className={'float-right'} onClick={onClick}>Nova</Button>;\n}\n\nfunction Header(props: RouteComponentProps) {\n\n  return (<>\n    <i className=\"fa fa-align-justify\"/> Empresas\n    <NovaEmpresaButton {...props}/>\n  </>);\n}\n\n","import React, {useEffect, useState} from 'react';\n\n\nimport {RouteComponentProps} from 'react-router';\nimport {EmpresaListagemView} from \"./EmpresaListagemView\";\nimport {createPage, createPageRequest} from \"../../../common/IPage\";\nimport EmpresaListagemModel from \"../../../domain/empresa/EmpresaListagemModel\";\nimport AlertModel, {alertFromAxiosError} from \"../../../common/AlertModel\";\nimport {buscaEmpresasPaginadas} from \"../../../domain/empresa/EmpresaService\";\n\n\nexport default function EmpresaListagem(props: RouteComponentProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(createPage<EmpresaListagemModel>());\n  const [pageRequest, setPageRequest] = useState(createPageRequest());\n  const [alert, setAlert] = useState<AlertModel | undefined>(undefined);\n\n  useEffect(() => {\n    buscaEmpresasPaginadas(pageRequest).then(response => {\n      setPage(response.data);\n      setIsLoading(false);\n    }).catch(e => {\n      setIsLoading(false);\n      setAlert(alertFromAxiosError(e))\n    });\n\n  }, [pageRequest, isLoading]);\n\n\n  const onChangePage = (page: number, _: number) => {\n    setPageRequest({...pageRequest, page})\n  }\n\n  const onChangeRowsPerPage = (size: number, _: number) => {\n    setPageRequest({...pageRequest, size})\n  };\n\n  return <EmpresaListagemView\n    {...props}\n    {...{\n      alert,\n      page,\n      pageRequest,\n      isLoading,\n      setIsLoading,\n      onChangePage,\n      onChangeRowsPerPage\n    }}\n  />\n}\n\n\n\n"],"sourceRoot":""}