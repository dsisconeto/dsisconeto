{"version":3,"sources":["components/AppPage.tsx","domain/empresa/EmpresaService.ts","common/IPage.ts","pages/Empresa/Listagem/EmpresaListagemView.tsx","pages/Empresa/Listagem/EmpresaListagem.tsx"],"names":["AppPage","header","children","alertModel","className","xs","sm","buscaEmpresasPaginadas","pageable","query","qs","stringify","vouDeVanApi","get","EMPRESAS","removeMascaraCNPJ","cnpj","replaceAll","removeMascaraTelefone","cadastraEmpresa","empresa","telefone","post","editaEmpresa","empresaId","uri","put","deletaEmpresa","delete","buscaEmpresaPorId","buscaEmpresaParaAutocomplete","termo","a","response","data","map","value","id","label","nome","createPage","content","number","size","totalElements","totalPages","createPageRequest","page","EmpresaListagemView","isLoading","setIsLoading","pageRequest","onChangeRowsPerPage","alert","onChangePage","props","forEach","empresaDto","action","TableActions","onDelete","toString","Header","noHeader","columns","name","selector","sortable","width","progressPending","pagination","paginationRowsPerPageOptions","paginationPerPage","striped","paginationServer","paginationTotalRows","history","useHistory","color","onClick","push","window","confirm","then","NovaEmpresaButton","EmpresaListagem","useState","setPage","setPageRequest","undefined","setAlert","useEffect","catch","e","alertFromAxiosError","_"],"mappings":"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","file":"static/js/11.62137bf3.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\r\nimport AlertModel from \"../common/AlertModel\";\r\nimport AppAlert from \"./AppAlert\";\r\n\r\n\r\ninterface Props {\r\n  header: JSX.Element,\r\n  alertModel?: AlertModel\r\n}\r\n\r\n\r\nconst AppPage: FC<Props> = ({header, children, alertModel}) => {\r\n  return (<div className=\"animated fadeIn\">\r\n    <Row>\r\n      <Col xs=\"12\" sm=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            {header}\r\n          </CardHeader>\r\n          <CardBody>\r\n            <AppAlert alertModel={alertModel}/>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  </div>);\r\n}\r\n\r\n\r\nexport default AppPage;\r\n\r\n","import vouDeVanApi from '../../common/vouDeVanApi';\r\n\r\nimport qs from 'qs';\r\nimport EmpresaFormModel from './EmpresaFormModel';\r\nimport IPage, {IPageRequest} from '../../common/IPage';\r\nimport EmpresaListagemModel from './EmpresaListagemModel';\r\nimport EmpresaAutocompleteModel from \"./EmpresaAutocompleteModel\";\r\n\r\n\r\nconst EMPRESAS = '/empresas';\r\n\r\n\r\nexport function buscaEmpresasPaginadas(pageable: IPageRequest) {\r\n  const query = qs.stringify(pageable);\r\n  return vouDeVanApi.get<IPage<EmpresaListagemModel>>(EMPRESAS + '?' + query);\r\n}\r\n\r\nfunction removeMascaraCNPJ(cnpj: string) {\r\n  return cnpj.replaceAll('-', '')\r\n    .replaceAll('/', '')\r\n    .replaceAll('.', '');\r\n}\r\n\r\nfunction removeMascaraTelefone(cnpj: string) {\r\n  return cnpj.replaceAll('-', '')\r\n    .replaceAll(' ', '')\r\n    .replaceAll(')', '')\r\n    .replaceAll('(', '');\r\n}\r\n\r\nexport function cadastraEmpresa(empresa: EmpresaFormModel) {\r\n\r\n  empresa.cnpj = removeMascaraCNPJ(empresa.cnpj);\r\n  empresa.telefone = removeMascaraTelefone(empresa.telefone)\r\n\r\n  return vouDeVanApi.post<EmpresaFormModel>(EMPRESAS, empresa);\r\n}\r\n\r\nexport function editaEmpresa(empresaId: number | string, empresa: EmpresaFormModel) {\r\n  empresa.cnpj = removeMascaraCNPJ(empresa.cnpj);\r\n  empresa.telefone = removeMascaraTelefone(empresa.telefone)\r\n  const uri = EMPRESAS + '/' + empresaId;\r\n  return vouDeVanApi.put<null>(uri, empresa);\r\n}\r\n\r\nexport function deletaEmpresa(empresaId: number | string) {\r\n  const uri = EMPRESAS + '/' + empresaId;\r\n  return vouDeVanApi.delete<null>(uri);\r\n}\r\n\r\nexport function buscaEmpresaPorId(empresaId: number | string) {\r\n  const uri = EMPRESAS + '/' + empresaId;\r\n  return vouDeVanApi.get<EmpresaFormModel>(uri);\r\n}\r\n\r\nexport async function buscaEmpresaParaAutocomplete(termo: string) {\r\n  const response = await vouDeVanApi.get<EmpresaAutocompleteModel[]>(EMPRESAS + \"/busca-para-autocomplete?termo=\" + termo);\r\n  return response.data.map(empresa => {\r\n    return {value: empresa.id, label: `${empresa.id} - ${empresa.nome}`}\r\n  });\r\n}\r\n\r\n","export default interface IPage<T> {\r\n  content: Array<T>,\r\n  size: number,\r\n  number: number,\r\n  totalPages: number,\r\n  totalElements: number,\r\n}\r\n\r\nexport interface IPageRequest {\r\n  page: number,\r\n  size: number\r\n}\r\n\r\nexport function createPage<T>(): IPage<T> {\r\n  return {content: [], number: 0, size: 0, totalElements: 0, totalPages: 0}\r\n}\r\n\r\n\r\nexport function createPageRequest(): IPageRequest {\r\n  return {page: 0, size: 0};\r\n}\r\n\r\n","import AppPage from \"../../../components/AppPage\";\r\nimport React from \"react\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport Button from \"reactstrap/lib/Button\";\r\nimport EmpresaListagemModel from \"../../../domain/empresa/EmpresaListagemModel\";\r\n\r\nimport IPage, {IPageRequest} from \"../../../common/IPage\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport AlertModel from \"../../../common/AlertModel\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {deletaEmpresa} from \"../../../domain/empresa/EmpresaService\";\r\n\r\n\r\ninterface Props extends RouteComponentProps {\r\n  alert?: AlertModel\r\n  isLoading: boolean,\r\n  setIsLoading: (isLoanding: boolean) => void\r\n  page: IPage<EmpresaListagemModel>,\r\n  pageRequest: IPageRequest,\r\n  onChangePage: (page: number, totalRows: number) => void;\r\n  onChangeRowsPerPage: (\r\n    currentRowsPerPage: number,\r\n    currentPage: number\r\n  ) => void\r\n}\r\n\r\nexport function EmpresaListagemView({isLoading, setIsLoading, page, pageRequest, onChangeRowsPerPage, alert, onChangePage, ...props}: Props) {\r\n\r\n\r\n  page.content.forEach(empresaDto => {\r\n    empresaDto.action = (<TableActions onDelete={() => setIsLoading(true)} empresaId={empresaDto.id.toString()}/>);\r\n  })\r\n\r\n  const header = <Header  {...props}/>;\r\n\r\n  return (<AppPage header={header} alertModel={alert}>\r\n    <DataTable\r\n      noHeader\r\n      columns={colunasDaTabela()}\r\n      data={page.content}\r\n      progressPending={isLoading}\r\n      pagination\r\n      paginationRowsPerPageOptions={[5, 50, 500]}\r\n      paginationPerPage={pageRequest.size}\r\n      striped\r\n      paginationServer\r\n      paginationTotalRows={page.totalElements}\r\n      onChangeRowsPerPage={onChangeRowsPerPage}\r\n      onChangePage={onChangePage}\r\n    />\r\n  </AppPage>);\r\n\r\n}\r\n\r\n\r\nfunction colunasDaTabela() {\r\n  return [\r\n    {\r\n      name: '#',\r\n      selector: 'id',\r\n      sortable: false,\r\n      width: '80px',\r\n    },\r\n    {\r\n      name: 'Empresa',\r\n      selector: 'nome',\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'Representante',\r\n      selector: 'representante',\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'Telefone',\r\n      selector: 'telefone',\r\n      sortable: false,\r\n    },\r\n\r\n    {\r\n      name: 'Email',\r\n      selector: 'email',\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'Ações',\r\n      selector: 'action',\r\n      sortable: false,\r\n    },\r\n\r\n  ];\r\n\r\n}\r\n\r\nfunction TableActions({empresaId, onDelete}: {\r\n  empresaId: string,\r\n  onDelete: () => void\r\n}) {\r\n  const history = useHistory();\r\n\r\n  const onEdit = () => history.push(`/empresas/editar/${empresaId}`);\r\n\r\n  const onClickDelete = () => {\r\n    if (!window.confirm('Confirme que você quer deletar a empresa')) return;\r\n    deletaEmpresa(empresaId).then(() => onDelete());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button color={'primary'} className={'mr-2'} onClick={onEdit}><i className=\"fas fa-pencil-alt\"/></Button>\r\n      <Button color={'danger'} onClick={onClickDelete}><i className=\"fas fa-trash\"/></Button>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nfunction NovaEmpresaButton({history}: RouteComponentProps) {\r\n  const onClick = () => history.push('/empresas/cadastrar');\r\n  return <Button color={'success'} className={'float-right'} onClick={onClick}>Nova</Button>;\r\n}\r\n\r\nfunction Header(props: RouteComponentProps) {\r\n\r\n  return (<>\r\n    <i className=\"fa fa-align-justify\"/> Empresas\r\n    <NovaEmpresaButton {...props}/>\r\n  </>);\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {EmpresaListagemView} from \"./EmpresaListagemView\";\r\nimport {createPage, createPageRequest} from \"../../../common/IPage\";\r\nimport EmpresaListagemModel from \"../../../domain/empresa/EmpresaListagemModel\";\r\nimport AlertModel, {alertFromAxiosError} from \"../../../common/AlertModel\";\r\nimport {buscaEmpresasPaginadas} from \"../../../domain/empresa/EmpresaService\";\r\n\r\n\r\nexport default function EmpresaListagem(props: RouteComponentProps) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [page, setPage] = useState(createPage<EmpresaListagemModel>());\r\n  const [pageRequest, setPageRequest] = useState(createPageRequest());\r\n  const [alert, setAlert] = useState<AlertModel | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    buscaEmpresasPaginadas(pageRequest).then(response => {\r\n      setPage(response.data);\r\n      setIsLoading(false);\r\n    }).catch(e => {\r\n      setIsLoading(false);\r\n      setAlert(alertFromAxiosError(e))\r\n    });\r\n\r\n  }, [pageRequest, isLoading]);\r\n\r\n\r\n  const onChangePage = (page: number, _: number) => {\r\n    setPageRequest({...pageRequest, page})\r\n  }\r\n\r\n  const onChangeRowsPerPage = (size: number, _: number) => {\r\n    setPageRequest({...pageRequest, size})\r\n  };\r\n\r\n  return <EmpresaListagemView\r\n    {...props}\r\n    {...{\r\n      alert,\r\n      page,\r\n      pageRequest,\r\n      isLoading,\r\n      setIsLoading,\r\n      onChangePage,\r\n      onChangeRowsPerPage\r\n    }}\r\n  />\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}