{"version":3,"sources":["components/AppPage.tsx","domain/linha/LinhaService.ts","common/IPage.ts","pages/Linha/LinhaListagem.tsx"],"names":["AppPage","header","children","alertModel","className","xs","sm","buscaLinhasPaginadas","pageable","query","qs","stringify","vouDeVanApi","get","LINHAS","cadastraLinha","model","post","editaLinha","id","put","buscaLinhaParaEditar","deletaLinha","linhaId","uri","delete","createPage","content","number","size","totalElements","totalPages","createPageRequest","page","LinhaListagem","props","useState","isLoading","setIsLoading","setPage","pageRequest","setPageRequest","undefined","alert","setAlert","useEffect","then","response","data","catch","e","alertFromAxiosError","forEach","linhaDto","action","TableActions","onDelete","toString","Header","noHeader","columns","name","selector","sortable","width","progressPending","pagination","paginationRowsPerPageOptions","paginationPerPage","striped","paginationServer","paginationTotalRows","onChangeRowsPerPage","_","onChangePage","history","useHistory","color","onClick","push","window","confirm","NovaLinhaButton"],"mappings":"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","file":"static/js/11.63a9eef3.chunk.js","sourcesContent":["import React, {FC} from \"react\";\nimport {Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\nimport AlertModel from \"../common/AlertModel\";\nimport AppAlert from \"./AppAlert\";\n\n\ninterface Props {\n  header: JSX.Element,\n  alertModel?: AlertModel\n}\n\n\nconst AppPage: FC<Props> = ({header, children, alertModel}) => {\n  return (<div className=\"animated fadeIn\">\n    <Row>\n      <Col xs=\"12\" sm=\"12\">\n        <Card>\n          <CardHeader>\n            {header}\n          </CardHeader>\n          <CardBody>\n            <AppAlert alertModel={alertModel}/>\n            {children}\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  </div>);\n}\n\n\nexport default AppPage;\n\n","import vouDeVanApi from \"../../common/vouDeVanApi\";\nimport {LinhaCadastraFormModel, LinhaEditaFormModel} from \"./LinhaModels\";\nimport IPage, {IPageRequest} from \"../../common/IPage\";\nimport qs from \"qs\";\nimport LinhaListagemModel from \"./LinhaListagemModel\";\n\n\nconst LINHAS = '/linhas';\n\nexport function buscaLinhasPaginadas(pageable: IPageRequest) {\n  const query = qs.stringify(pageable);\n  return vouDeVanApi.get<IPage<LinhaListagemModel>>(LINHAS + '?' + query);\n}\n\nexport function cadastraLinha(model: LinhaCadastraFormModel) {\n  return vouDeVanApi.post<{ id: number }>(LINHAS, model);\n}\n\nexport function editaLinha(id: string, model: LinhaEditaFormModel) {\n  return vouDeVanApi.put(`${LINHAS}/${id}`, model);\n}\n\nexport function buscaLinhaParaEditar(id: string) {\n  return vouDeVanApi.get<LinhaEditaFormModel>(`${LINHAS}/consulta-para-editar/${id}`)\n}\n\nexport function deletaLinha(linhaId: number | string) {\n  const uri = LINHAS + '/' + linhaId;\n  return vouDeVanApi.delete<null>(uri);\n}\n","export default interface IPage<T> {\n  content: Array<T>,\n  size: number,\n  number: number,\n  totalPages: number,\n  totalElements: number,\n}\n\nexport interface IPageRequest {\n  page: number,\n  size: number\n}\n\nexport function createPage<T>(): IPage<T> {\n  return {content: [], number: 0, size: 0, totalElements: 0, totalPages: 0}\n}\n\n\nexport function createPageRequest(): IPageRequest {\n  return {page: 0, size: 0};\n}\n\n","import React, {useEffect, useState} from \"react\";\n\nimport {RouteComponentProps} from \"react-router\";\nimport AlertModel, {alertFromAxiosError} from \"../../common/AlertModel\";\nimport {createPage, createPageRequest} from \"../../common/IPage\";\nimport LinhaListagemModel from \"../../domain/linha/LinhaListagemModel\";\nimport {buscaLinhasPaginadas, deletaLinha} from \"../../domain/linha/LinhaService\";\nimport {useHistory} from \"react-router-dom\";\nimport Button from \"reactstrap/lib/Button\";\nimport AppPage from \"../../components/AppPage\";\nimport DataTable from \"react-data-table-component\";\n\n\nexport default function LinhaListagem(props: RouteComponentProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(createPage<LinhaListagemModel>());\n  const [pageRequest, setPageRequest] = useState(createPageRequest());\n  const [alert, setAlert] = useState<AlertModel | undefined>(undefined);\n\n  useEffect(() => {\n    buscaLinhasPaginadas(pageRequest).then(response => {\n      setPage(response.data);\n      setIsLoading(false);\n    }).catch(e => {\n      setIsLoading(false);\n      setAlert(alertFromAxiosError(e))\n    });\n\n  }, [pageRequest, isLoading]);\n\n  useEffect(() => {\n    page.content.forEach(linhaDto => {\n      linhaDto.action = (<TableActions onDelete={() => setIsLoading(true)} linhaId={linhaDto.id.toString()}/>);\n    })\n  }, [page])\n\n\n  const onChangePage = (page: number, _: number) => {\n    setPageRequest({...pageRequest, page})\n  }\n\n  const onChangeRowsPerPage = (size: number, _: number) => {\n    setPageRequest({...pageRequest, size})\n  };\n\n  return <AppPage header={<Header  {...props}/>} alertModel={alert}>\n    <DataTable\n      noHeader\n      columns={colunasDaTabela()}\n      data={page.content}\n      progressPending={isLoading}\n      pagination\n      paginationRowsPerPageOptions={[5, 50, 500]}\n      paginationPerPage={pageRequest.size}\n      striped\n      paginationServer\n      paginationTotalRows={page.totalElements}\n      onChangeRowsPerPage={onChangeRowsPerPage}\n      onChangePage={onChangePage}\n    />\n  </AppPage>;\n}\n\n\nfunction colunasDaTabela() {\n  return [\n    {\n      name: '#',\n      selector: 'id',\n      sortable: false,\n      width: '80px',\n    },\n    {\n      name: 'Empresa',\n      selector: 'empresaNome',\n      sortable: false,\n    },\n    {\n      name: 'Origem',\n      selector: 'rotaOrigemNome',\n      sortable: false,\n    },\n    {\n      name: 'Destino',\n      selector: 'rotaDestinoNome',\n      sortable: false,\n    },\n    {\n      name: 'Ações',\n      selector: 'action',\n      sortable: false,\n    },\n  ];\n}\n\nfunction TableActions({linhaId, onDelete}: {\n  linhaId: string,\n  onDelete: () => void\n}) {\n  const history = useHistory();\n\n  const onEdit = () => history.push(`/linhas/${linhaId}/editar`);\n\n  const onClickDelete = () => {\n    if (!window.confirm('Confirme que você quer deletar a linha')) return;\n    deletaLinha(linhaId).then(() => onDelete());\n  };\n\n  return (\n    <>\n      <Button color={'primary'} className={'mr-2'} onClick={onEdit}><i className=\"fas fa-pencil-alt\"/></Button>\n      <Button color={'danger'} onClick={onClickDelete}><i className=\"fas fa-trash\"/></Button>\n    </>\n  );\n}\n\nfunction NovaLinhaButton({history}: RouteComponentProps) {\n  const onClick = () => history.push('/linhas/cadastro');\n  return <Button color={'success'} className={'float-right'} onClick={onClick}>Nova</Button>;\n}\n\nfunction Header(props: RouteComponentProps) {\n\n  return (<>\n    <i className=\"fa fa-align-justify\"/> Linhas\n    <NovaLinhaButton {...props}/>\n  </>);\n}\n\n\n\n"],"sourceRoot":""}