{"version":3,"sources":["components/AppPage.tsx","domain/empresa/EmpresaService.ts","common/dataUtils.ts","domain/linha/LinhaService.ts","common/IPage.ts","pages/Linha/LinhaListagem.tsx"],"names":["AppPage","header","children","alertModel","className","xs","sm","buscaEmpresasPaginadas","pageable","query","qs","stringify","vouDeVanApi","get","EMPRESAS","removeMascaraCNPJ","cnpj","replaceAll","removeMascaraTelefone","cadastraEmpresa","empresa","telefone","post","editaEmpresa","empresaId","uri","put","deletaEmpresa","delete","buscaEmpresaPorId","buscaEmpresaParaAutocomplete","termo","a","response","data","map","value","id","label","nome","isBrazilDate","DateTime","fromFormat","isValid","toDateIso","brazilDate","toISODate","toBrazilDate","isoDate","fromISO","toFormat","isValidTime","time","buscaLinhasPaginadas","filtro","pageRequest","params","cadastraLinha","model","preparaHorariosDaSemanaFormModel","_","cloneDeep","isHorarioValido","horario","partida","chegada","diasUnicos","diaUnico","horarios","filter","length","segunda","terca","quarta","quinta","sexta","sabado","domingo","editaLinha","buscaLinhaParaEditar","deletaLinha","linhaId","LINHAS","createPage","content","number","size","totalElements","totalPages","createPageRequest","page","LinhaListagem","props","useState","isLoading","setIsLoading","setPage","undefined","alert","setAlert","filtroDaListagem","setFiltroDaListagem","useEffect","then","catch","e","alertFromAxiosError","forEach","linhaDto","action","TableActions","onDelete","toString","Header","md","for","cacheOptions","name","isClearable","loadOptions","onChange","option","noHeader","columns","selector","sortable","width","progressPending","pagination","paginationRowsPerPageOptions","paginationPerPage","striped","paginationServer","paginationTotalRows","onChangeRowsPerPage","onChangePage","history","useHistory","color","onClick","push","window","confirm","NovaLinhaButton"],"mappings":"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","file":"static/js/12.8ad50111.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Card, CardBody, CardHeader, Col, Row} from \"reactstrap\";\r\nimport AlertModel from \"../common/AlertModel\";\r\nimport AppAlert from \"./AppAlert\";\r\n\r\n\r\ninterface Props {\r\n  header: JSX.Element,\r\n  alertModel?: AlertModel\r\n}\r\n\r\n\r\nconst AppPage: FC<Props> = ({header, children, alertModel}) => {\r\n  return (<div className=\"animated fadeIn\">\r\n    <Row>\r\n      <Col xs=\"12\" sm=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            {header}\r\n          </CardHeader>\r\n          <CardBody>\r\n            <AppAlert alertModel={alertModel}/>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  </div>);\r\n}\r\n\r\n\r\nexport default AppPage;\r\n\r\n","import vouDeVanApi from '../../common/vouDeVanApi';\r\n\r\nimport qs from 'qs';\r\nimport EmpresaFormModel from './EmpresaFormModel';\r\nimport IPage, {IPageRequest} from '../../common/IPage';\r\nimport EmpresaListagemModel from './EmpresaListagemModel';\r\nimport EmpresaAutocompleteModel from \"./EmpresaAutocompleteModel\";\r\n\r\n\r\nconst EMPRESAS = '/empresas';\r\n\r\n\r\nexport function buscaEmpresasPaginadas(pageable: IPageRequest) {\r\n  const query = qs.stringify(pageable);\r\n  return vouDeVanApi.get<IPage<EmpresaListagemModel>>(EMPRESAS + '?' + query);\r\n}\r\n\r\nfunction removeMascaraCNPJ(cnpj: string) {\r\n  return cnpj.replaceAll('-', '')\r\n    .replaceAll('/', '')\r\n    .replaceAll('.', '');\r\n}\r\n\r\nfunction removeMascaraTelefone(cnpj: string) {\r\n  return cnpj.replaceAll('-', '')\r\n    .replaceAll(' ', '')\r\n    .replaceAll(')', '')\r\n    .replaceAll('(', '');\r\n}\r\n\r\nexport function cadastraEmpresa(empresa: EmpresaFormModel) {\r\n\r\n  empresa.cnpj = removeMascaraCNPJ(empresa.cnpj);\r\n  empresa.telefone = removeMascaraTelefone(empresa.telefone)\r\n\r\n  return vouDeVanApi.post<EmpresaFormModel>(EMPRESAS, empresa);\r\n}\r\n\r\nexport function editaEmpresa(empresaId: number | string, empresa: EmpresaFormModel) {\r\n  empresa.cnpj = removeMascaraCNPJ(empresa.cnpj);\r\n  empresa.telefone = removeMascaraTelefone(empresa.telefone)\r\n  const uri = EMPRESAS + '/' + empresaId;\r\n  return vouDeVanApi.put<null>(uri, empresa);\r\n}\r\n\r\nexport function deletaEmpresa(empresaId: number | string) {\r\n  const uri = EMPRESAS + '/' + empresaId;\r\n  return vouDeVanApi.delete<null>(uri);\r\n}\r\n\r\nexport function buscaEmpresaPorId(empresaId: number | string) {\r\n  const uri = EMPRESAS + '/' + empresaId;\r\n  return vouDeVanApi.get<EmpresaFormModel>(uri);\r\n}\r\n\r\nexport async function buscaEmpresaParaAutocomplete(termo: string) {\r\n  const response = await vouDeVanApi.get<EmpresaAutocompleteModel[]>(EMPRESAS + \"/busca-para-autocomplete?termo=\" + termo);\r\n  return response.data.map(empresa => {\r\n    return {value: empresa.id, label: `${empresa.id} - ${empresa.nome}`}\r\n  });\r\n}\r\n\r\n","import {DateTime} from \"luxon\";\n\nconst brazilDateFormat = 'dd/MM/yyyy';\n\nexport function isBrazilDate(data: string): boolean {\n  return DateTime.fromFormat(data, brazilDateFormat).isValid\n}\n\nexport function toDateIso(brazilDate: string): string {\n  return DateTime.fromFormat(brazilDate, brazilDateFormat).toISODate() as string\n}\n\nexport function toBrazilDate(isoDate: string): string {\n  return DateTime.fromISO(isoDate).toFormat(brazilDateFormat)\n}\n\nexport function isValidTime(time: string) {\n  return DateTime.fromFormat(time, 'H:mm').isValid\n}\n","import vouDeVanApi from \"../../common/vouDeVanApi\";\nimport {Horario, HorariosDaSemanaFormModel, LinhaCadastraFormModel, LinhaEditaFormModel} from \"./LinhaModels\";\nimport IPage from \"../../common/IPage\";\nimport LinhaListagemModel from \"./LinhaListagemModel\";\nimport {FiltroDaListagem} from \"../../pages/Linha/LinhaListagem\";\n\nimport {isBrazilDate, toDateIso, isValidTime} from \"../../common/dataUtils\";\nimport _ from \"lodash\";\n\nconst LINHAS = '/linhas';\n\nexport function buscaLinhasPaginadas(filtro: FiltroDaListagem) {\n  let pageRequest = filtro.pageRequest;\n  let empresaId = filtro.empresaId\n  return vouDeVanApi.get<IPage<LinhaListagemModel>>(LINHAS, {\n    params: {\n      ...pageRequest,\n      empresaId\n    }\n  });\n}\n\nexport function cadastraLinha(model: LinhaCadastraFormModel) {\n  model = _.cloneDeep(model);\n  preparaHorariosDaSemanaFormModel(model);\n  return vouDeVanApi.post<{ id: number }>(LINHAS, model);\n}\n\n\nfunction isHorarioValido(horario: Horario) {\n  return isValidTime(horario.partida) && isValidTime(horario.chegada);\n}\n\nfunction preparaHorariosDaSemanaFormModel(model: HorariosDaSemanaFormModel) {\n  model.diasUnicos = model.diasUnicos\n    .map(diaUnico => {\n      return {...diaUnico, horarios: diaUnico.horarios.filter(isHorarioValido)}\n    })\n    .filter(diaUnico => isBrazilDate(diaUnico.data) && diaUnico.horarios.length !== 0)\n    .map(diaUnico => {\n      return {...diaUnico, data: toDateIso(diaUnico.data)}\n    })\n  model.segunda = model.segunda\n    .filter(isHorarioValido)\n  model.terca = model.terca\n    .filter(isHorarioValido)\n  model.quarta = model.quarta\n    .filter(isHorarioValido)\n  model.quinta = model.quinta\n    .filter(isHorarioValido)\n  model.sexta = model.sexta\n    .filter(isHorarioValido)\n  model.sabado = model.sabado\n    .filter(isHorarioValido)\n  model.domingo = model.domingo\n    .filter(isHorarioValido)\n\n}\n\nexport function editaLinha(id: string, model: LinhaEditaFormModel) {\n  model = _.cloneDeep(model);\n  preparaHorariosDaSemanaFormModel(model)\n  return vouDeVanApi.put(`${LINHAS}/${id}`, model);\n}\n\nexport function buscaLinhaParaEditar(id: string) {\n  return vouDeVanApi.get<LinhaEditaFormModel>(`${LINHAS}/consulta-para-editar/${id}`)\n}\n\nexport function deletaLinha(linhaId: number | string) {\n  const uri = LINHAS + '/' + linhaId;\n  return vouDeVanApi.delete<null>(uri);\n}\n","export default interface IPage<T> {\r\n  content: Array<T>,\r\n  size: number,\r\n  number: number,\r\n  totalPages: number,\r\n  totalElements: number,\r\n}\r\n\r\nexport interface IPageRequest {\r\n  page: number,\r\n  size: number\r\n}\r\n\r\nexport function createPage<T>(): IPage<T> {\r\n  return {content: [], number: 0, size: 0, totalElements: 0, totalPages: 0}\r\n}\r\n\r\n\r\nexport function createPageRequest(): IPageRequest {\r\n  return {page: 0, size: 5};\r\n}\r\n\r\n","import React, {useEffect, useState} from \"react\";\n\nimport {RouteComponentProps} from \"react-router\";\nimport AlertModel, {alertFromAxiosError} from \"../../common/AlertModel\";\nimport {createPage, createPageRequest, IPageRequest} from \"../../common/IPage\";\nimport LinhaListagemModel from \"../../domain/linha/LinhaListagemModel\";\nimport {buscaLinhasPaginadas, deletaLinha} from \"../../domain/linha/LinhaService\";\nimport {useHistory} from \"react-router-dom\";\nimport Button from \"reactstrap/lib/Button\";\nimport AppPage from \"../../components/AppPage\";\nimport DataTable from \"react-data-table-component\";\nimport {Col, Label, Row} from \"reactstrap\";\nimport AsyncSelect from \"react-select/async\";\nimport {buscaEmpresaParaAutocomplete} from \"../../domain/empresa/EmpresaService\";\n\nexport interface FiltroDaListagem {\n  pageRequest: IPageRequest,\n  empresaId: string\n}\n\n\nexport default function LinhaListagem(props: RouteComponentProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [page, setPage] = useState(createPage<LinhaListagemModel>());\n  const [alert, setAlert] = useState<AlertModel | undefined>(undefined);\n  const [filtroDaListagem, setFiltroDaListagem] = useState<FiltroDaListagem>({\n    empresaId: \"\",\n    pageRequest: createPageRequest()\n  });\n\n  useEffect(() => {\n    buscaLinhasPaginadas(filtroDaListagem).then(response => {\n      setPage(response.data);\n      setIsLoading(false);\n    }).catch(e => {\n      setIsLoading(false);\n      setAlert(alertFromAxiosError(e))\n    });\n\n  }, [isLoading, filtroDaListagem]);\n\n  page.content.forEach(linhaDto => {\n    linhaDto.action = (<TableActions onDelete={() => setIsLoading(true)} linhaId={linhaDto.id.toString()}/>);\n  })\n\n  const onChangePage = (page: number, _: number) => {\n    // Deu problema com a paginacao do spring que comeca no 0 ao inves de 1 opora\n    filtroDaListagem.pageRequest.page = page - 1;\n    setFiltroDaListagem({...filtroDaListagem})\n  }\n\n  const onChangeRowsPerPage = (size: number, _: number) => {\n    filtroDaListagem.pageRequest.size = size;\n    setFiltroDaListagem({...filtroDaListagem})\n  };\n\n  return (<AppPage header={<Header  {...props}/>} alertModel={alert}>\n    <Row>\n      <Col md={12}>\n        <Label for={'empresaId'}>Selecione uma Empresa</Label>\n        <AsyncSelect\n          cacheOptions\n          name=\"empresaId\"\n          isClearable={true}\n          id=\"empresaId\"\n          loadOptions={buscaEmpresaParaAutocomplete}\n          onChange={option => {\n            filtroDaListagem.empresaId = (option as any) ? (option as any).value : \"\";\n            filtroDaListagem.pageRequest.page = 0;\n            setFiltroDaListagem({...filtroDaListagem})\n          }}\n        />\n      </Col>\n    </Row>\n    <DataTable\n      noHeader\n      columns={colunasDaTabela()}\n      data={page.content}\n      progressPending={isLoading}\n      pagination\n      paginationRowsPerPageOptions={[5, 50, 500]}\n      paginationPerPage={5}\n      striped\n      paginationServer\n      paginationTotalRows={page.totalElements}\n      onChangeRowsPerPage={onChangeRowsPerPage}\n      onChangePage={onChangePage}\n    />\n  </AppPage>);\n}\n\n\nfunction colunasDaTabela() {\n  return [\n    {\n      name: '#',\n      selector: 'id',\n      sortable: false,\n      width: '80px',\n    },\n    {\n      name: 'Nome',\n      selector: 'nome',\n      sortable: false,\n    },\n\n    {\n      name: 'Empresa',\n      selector: 'empresa',\n      sortable: false,\n    },\n    {\n      name: 'Ações',\n      selector: 'action',\n      sortable: false,\n    },\n  ];\n}\n\nfunction TableActions({linhaId, onDelete}: {\n  linhaId: string,\n  onDelete: () => void\n}) {\n  const history = useHistory();\n\n  const onEdit = () => history.push(`/linhas/${linhaId}/editar`);\n\n  const onClickDelete = () => {\n    if (!window.confirm('Confirme que você quer deletar a linha')) return;\n    deletaLinha(linhaId).then(() => onDelete());\n  };\n\n  return (\n    <>\n      <Button color={'primary'} className={'mr-2'} onClick={onEdit}><i className=\"fas fa-pencil-alt\"/></Button>\n      <Button color={'danger'} onClick={onClickDelete}><i className=\"fas fa-trash\"/></Button>\n    </>\n  );\n}\n\nfunction NovaLinhaButton({history}: RouteComponentProps) {\n  const onClick = () => history.push('/linhas/cadastro');\n  return <Button color={'success'} className={'float-right'} onClick={onClick}>Nova</Button>;\n}\n\nfunction Header(props: RouteComponentProps) {\n\n  return (<>\n    <i className=\"fa fa-align-justify\"/> Linhas\n    <NovaLinhaButton {...props}/>\n  </>);\n}\n\n\n\n"],"sourceRoot":""}